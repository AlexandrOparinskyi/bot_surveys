--
-- PostgreSQL database dump
--

-- Dumped from database version 16.4
-- Dumped by pg_dump version 16.4

SET statement_timeout = 0;
SET lock_timeout = 0;
SET idle_in_transaction_session_timeout = 0;
SET client_encoding = 'UTF8';
SET standard_conforming_strings = on;
SELECT pg_catalog.set_config('search_path', '', false);
SET check_function_bodies = false;
SET xmloption = content;
SET client_min_messages = warning;
SET row_security = off;

SET default_tablespace = '';

SET default_table_access_method = heap;

--
-- Name: alembic_version; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.alembic_version (
    version_num character varying(32) NOT NULL
);


ALTER TABLE public.alembic_version OWNER TO postgres;

--
-- Name: bot_commands; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.bot_commands (
    command character varying(20) NOT NULL,
    text text NOT NULL,
    id integer NOT NULL,
    in_main_menu boolean
);


ALTER TABLE public.bot_commands OWNER TO postgres;

--
-- Name: bot_commands_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE public.bot_commands_id_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER SEQUENCE public.bot_commands_id_seq OWNER TO postgres;

--
-- Name: bot_commands_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE public.bot_commands_id_seq OWNED BY public.bot_commands.id;


--
-- Name: register_commands; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.register_commands (
    command character varying(50) NOT NULL,
    text text NOT NULL,
    description character varying,
    id integer NOT NULL
);


ALTER TABLE public.register_commands OWNER TO postgres;

--
-- Name: register_commands_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE public.register_commands_id_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER SEQUENCE public.register_commands_id_seq OWNER TO postgres;

--
-- Name: register_commands_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE public.register_commands_id_seq OWNED BY public.register_commands.id;


--
-- Name: users; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.users (
    user_id bigint NOT NULL,
    username character varying(100),
    name character varying(50) NOT NULL,
    surname character varying(70) NOT NULL,
    age integer NOT NULL,
    city character varying(100) NOT NULL,
    id integer NOT NULL
);


ALTER TABLE public.users OWNER TO postgres;

--
-- Name: users_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE public.users_id_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER SEQUENCE public.users_id_seq OWNER TO postgres;

--
-- Name: users_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE public.users_id_seq OWNED BY public.users.id;


--
-- Name: bot_commands id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.bot_commands ALTER COLUMN id SET DEFAULT nextval('public.bot_commands_id_seq'::regclass);


--
-- Name: register_commands id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.register_commands ALTER COLUMN id SET DEFAULT nextval('public.register_commands_id_seq'::regclass);


--
-- Name: users id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.users ALTER COLUMN id SET DEFAULT nextval('public.users_id_seq'::regclass);


--
-- Data for Name: alembic_version; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.alembic_version (version_num) FROM stdin;
38b971a6e41f
\.


--
-- Data for Name: bot_commands; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.bot_commands (command, text, id, in_main_menu) FROM stdin;
help	Это команда /help\r\nПотом здесь будет прописана вся важная информация и часто задаваемые вопросы	2	t
start	Приветствую\r\nЯ бот для опросов\r\nДавай знакомиться	1	f
test	Это тестовая команда	4	t
\.


--
-- Data for Name: register_commands; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.register_commands (command, text, description, id) FROM stdin;
register	Отлично\r\nТы решил зарегистрироваться, значит начнем знакомиться\r\nНапиши, пожалуйста, своё имя и фамилию через пробел	Срабатывает после команды /register и предлагает ввести имя и фамилию	1
register_name	Хорошо\nТеперь укажите свой возраст\nПросто введите число	Срабатывает после ввода имени и фамилии и предлагает ввести возраст	2
fail_register_name	Какая-то ошибка...\nИмя и фамилию нужно ввести через пробел\nНапример "Иван Иванов"\nПопробуйте ищё раз	Срабатывает при неправильном вводе имени и фамилии и предлагает ввести их ещё раз	3
register_age	Осталось ввести свой город и мы закончим с регистрацией	Срабатывает после ввода возраста и предлагает ввести город	4
fail_register_age	Какая-то ошибка...\nВозраст необходимо ввести цифрами, например - 34\nПожалуйста, попробуйте ещё раз	Срабатывает после неудачного ввода возраста и предлагает ввести его ещё Срабатывает при неправильном вводе имени и фамилии и предлагает ввести их ещё раз	5
register_city	Замечательно\nДавайте проверим все Ваши данные	Срабатывает после ввода города и предлагает подтвердить все свои данные.	6
register_confirm	Спасибо за регистрацию\nТеперь вы можете проходить опросы\nДля этого необходимо ввести команду /surveys или найти нужный пункт в меню	Срабатывает после подтверждения регистрации	7
user_exists	Вы уже зарегистрированы	Срабатывает, если пользователь пытается пройти регистрацию повторно и выдает ошибку	8
\.


--
-- Data for Name: users; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.users (user_id, username, name, surname, age, city, id) FROM stdin;
424306502	oparinskyi	Иван	Иванов	27	Курск	5
\.


--
-- Name: bot_commands_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public.bot_commands_id_seq', 4, true);


--
-- Name: register_commands_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public.register_commands_id_seq', 8, true);


--
-- Name: users_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public.users_id_seq', 5, true);


--
-- Name: alembic_version alembic_version_pkc; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.alembic_version
    ADD CONSTRAINT alembic_version_pkc PRIMARY KEY (version_num);


--
-- Name: bot_commands bot_commands_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.bot_commands
    ADD CONSTRAINT bot_commands_pkey PRIMARY KEY (id);


--
-- Name: register_commands register_commands_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.register_commands
    ADD CONSTRAINT register_commands_pkey PRIMARY KEY (id);


--
-- Name: users users_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.users
    ADD CONSTRAINT users_pkey PRIMARY KEY (id);


--
-- Name: users users_user_id_key; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.users
    ADD CONSTRAINT users_user_id_key UNIQUE (user_id);


--
-- Name: users users_username_key; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.users
    ADD CONSTRAINT users_username_key UNIQUE (username);


--
-- PostgreSQL database dump complete
--

